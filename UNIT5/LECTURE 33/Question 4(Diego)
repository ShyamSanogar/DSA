#include <iostream>
#include <vector>
using namespace std;

void swap(int &x, int &y) {
    int temp = x;
    x = y;
    y = temp;
}

void maxHeapify(int arr[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest]) {
        largest = left;
    }

    if (right < n && arr[right] > arr[largest]) {
        largest = right;
    }

    if (largest != i) {
        swap(arr[i], arr[largest]);
        maxHeapify(arr, n, largest);
    }
}

void buildMaxHeap(int arr[], int n) {
    for (int i = n / 2 - 1; i >= 0; i--) {
        maxHeapify(arr, n, i);
    }
}

int deleteMax(int arr[], int &n) {
    if (n == 0) {
        return -1;  // No element to delete
    }

    // The largest element is at the root
    int maxElement = arr[0];

    // Move the last element to the root
    arr[0] = arr[n - 1];
    n--;

    // Heapify to maintain max-heap property
    maxHeapify(arr, n, 0);

    return maxElement;
}

long long productRemaining(int arr[], int n) {
    long long product = 1;
    for (int i = 0; i < n; i++) {
        product *= arr[i];
    }
    return product;
}

int main() {
    int n;
    cin >> n;

    int* arr = new int[n];

    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    buildMaxHeap(arr, n);
    int maxElement = deleteMax(arr, n);
    cout << "Deleted largest element: " << maxElement << endl;

    long long product = productRemaining(arr, n);
    cout << "Product of remaining elements: " << product << endl;

    delete[] arr;

    return 0;
}
