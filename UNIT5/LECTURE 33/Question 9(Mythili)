#include <iostream>
using namespace std;

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void MaxHeapify(int arr[], int N, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < N && arr[left] > arr[largest]) {
        largest = left;
    }

    if (right < N && arr[right] > arr[largest]) {
        largest = right;
    }

    if (largest != i) {
        swap(&arr[i], &arr[largest]);
        MaxHeapify(arr, N, largest);
    }
}

void MaxHeapSort(int arr[], int N) {
    for (int i = N / 2 - 1; i >= 0; i--) {
        MaxHeapify(arr, N, i);
    }

    for (int i = N - 1; i >= 1; i--) {
        swap(&arr[0], &arr[i]);
        MaxHeapify(arr, i, 0);
    }
}

void MinHeapify(int arr[], int N, int i) {
    int smallest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < N && arr[left] < arr[smallest]) {
        smallest = left;
    }

    if (right < N && arr[right] < arr[smallest]) {
        smallest = right;
    }

    if (smallest != i) {
        swap(&arr[i], &arr[smallest]);
        MinHeapify(arr, N, smallest);
    }
}

void MinHeapSort(int arr[], int N) {
    for (int i = N / 2 - 1; i >= 0; i--) {
        MinHeapify(arr, N, i);
    }

    for (int i = N - 1; i >= 1; i--) {
        swap(&arr[0], &arr[i]);
        MinHeapify(arr, i, 0);
    }
}

void printHeapArray(int arr[], int N) {
    for (int i = 0; i < N; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int n;
    cin >> n;
    int arr[n];

    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int choice;
    cin >> choice;

    if (choice < 1 || choice > 2) {
        cout << "Invalid choice" << endl;
        return 0;
    }

    if (choice == 1) {
        MaxHeapSort(arr, n);
    } else if (choice == 2) {
        MinHeapSort(arr, n);
    }

    printHeapArray(arr, n);

    return 0;
}
